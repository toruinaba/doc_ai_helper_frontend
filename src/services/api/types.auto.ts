/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Check if the API is up and running
         */
        get: operations["health_check_api_v1_health__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/contents/{service}/{owner}/{repo}/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get document
         * @description Get document from a Git repository
         */
        get: operations["get_document_api_v1_documents_contents__service___owner___repo___path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/structure/{service}/{owner}/{repo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get repository structure
         * @description Get structure of a Git repository
         */
        get: operations["get_repository_structure_api_v1_documents_structure__service___owner___repo__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/search/{service}/{owner}/{repo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search repository
         * @description Search for content in a repository
         */
        post: operations["search_repository_api_v1_search__service___owner___repo__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/llm/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Query LLM
         * @description Send a query to an LLM with optional document context
         */
        post: operations["query_llm_api_v1_llm_query_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/llm/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get LLM capabilities
         * @description Get the capabilities of the configured LLM provider
         */
        get: operations["get_capabilities_api_v1_llm_capabilities_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/llm/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get provider information
         * @description Get information about available LLM providers and their status
         */
        get: operations["get_provider_info_api_v1_llm_providers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/llm/providers/{provider_name}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific provider status
         * @description Get detailed status information for a specific provider
         */
        get: operations["get_provider_status_api_v1_llm_providers__provider_name__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/llm/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List available templates
         * @description Get a list of available prompt templates
         */
        get: operations["list_templates_api_v1_llm_templates_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/llm/format-prompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Format prompt template
         * @description Format a prompt template with provided variables
         */
        post: operations["format_prompt_api_v1_llm_format_prompt_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/llm/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stream LLM response
         * @description Stream response from LLM in real-time using Server-Sent Events (SSE)
         */
        post: operations["stream_llm_response_api_v1_llm_stream_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/llm/tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available MCP tools
         * @description Get a list of all available MCP tools with their descriptions and parameters
         */
        get: operations["get_mcp_tools_api_v1_llm_tools_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/llm/tools/{tool_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific MCP tool information
         * @description Get detailed information about a specific MCP tool
         */
        get: operations["get_mcp_tool_api_v1_llm_tools__tool_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * CoreQueryRequest
         * @description Essential query parameters for LLM requests.
         *
         *     This model contains only the fundamental parameters needed for any LLM query.
         */
        CoreQueryRequest: {
            /**
             * Prompt
             * @description The prompt to send to the LLM
             */
            prompt: string;
            /**
             * Provider
             * @description LLM provider to use (e.g., openai, anthropic)
             * @default openai
             */
            provider: string;
            /**
             * Model
             * @description Specific model to use (if None, default for provider is used)
             */
            model?: string | null;
            /**
             * Conversation History
             * @description Previous messages in the conversation for context
             */
            conversation_history?: components["schemas"]["MessageItem"][] | null;
        };
        /**
         * DocumentContent
         * @description Document content model.
         */
        DocumentContent: {
            /**
             * Content
             * @description Document content
             */
            content: string;
            /**
             * Encoding
             * @description Document encoding
             * @default utf-8
             */
            encoding: string;
        };
        /**
         * DocumentContext
         * @description Document integration context for repository-aware queries.
         *
         *     This model groups all parameters related to document and repository context.
         */
        DocumentContext: {
            /** @description Repository context from current document view */
            repository_context?: components["schemas"]["RepositoryContext"] | null;
            /** @description Metadata of currently displayed document */
            document_metadata?: components["schemas"]["DocumentMetadata-Input"] | null;
            /**
             * Auto Include Document
             * @description Whether to automatically fetch document content from repository_context and include in conversation history for initial requests
             * @default true
             */
            auto_include_document: boolean;
            /**
             * Context Documents
             * @description List of document paths to include in context
             */
            context_documents?: string[] | null;
        };
        /**
         * DocumentMetadata
         * @description Metadata of currently displayed document.
         *
         *     This model contains metadata information about the document
         *     being viewed, which helps in generating appropriate system prompts.
         */
        "DocumentMetadata-Input": {
            /**
             * Title
             * @description Document title extracted from content or filename
             */
            title?: string | null;
            /** @description Document type/format */
            type: components["schemas"]["DocumentType-Input"];
            /**
             * Filename
             * @description Original filename
             */
            filename?: string | null;
            /**
             * File Extension
             * @description File extension
             */
            file_extension?: string | null;
            /**
             * Last Modified
             * @description Last modification date (ISO format)
             */
            last_modified?: string | null;
            /**
             * File Size
             * @description File size in bytes
             */
            file_size?: number | null;
            /**
             * Encoding
             * @description File encoding
             * @default utf-8
             */
            encoding: string;
            /**
             * Language
             * @description Primary language of the document (ja, en, etc.)
             */
            language?: string | null;
        };
        /**
         * DocumentMetadata
         * @description Document metadata model.
         */
        "DocumentMetadata-Output": {
            /**
             * Size
             * @description Document size in bytes
             */
            size: number;
            /**
             * Last Modified
             * Format: date-time
             * @description Last modified datetime
             */
            last_modified: string;
            /**
             * Content Type
             * @description Content type
             */
            content_type: string;
            /**
             * Sha
             * @description SHA hash of the document
             */
            sha?: string | null;
            /**
             * Download Url
             * @description Download URL
             */
            download_url?: string | null;
            /**
             * Html Url
             * @description HTML URL
             */
            html_url?: string | null;
            /**
             * Raw Url
             * @description Raw URL
             */
            raw_url?: string | null;
            /**
             * Extra
             * @description Extra metadata
             * @default {}
             */
            extra: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * DocumentResponse
         * @description Document response model.
         */
        DocumentResponse: {
            /**
             * Path
             * @description Path to the document in the repository
             */
            path: string;
            /**
             * Name
             * @description Document name
             */
            name: string;
            /** @description Document type */
            type: components["schemas"]["DocumentType-Output"];
            /** @description Document metadata */
            metadata: components["schemas"]["DocumentMetadata-Output"];
            /** @description Document content */
            content: components["schemas"]["DocumentContent"];
            /**
             * Repository
             * @description Repository name
             */
            repository: string;
            /**
             * Owner
             * @description Repository owner
             */
            owner: string;
            /**
             * Service
             * @description Git service
             */
            service: string;
            /**
             * Ref
             * @description Branch or tag name
             * @default main
             */
            ref: string;
            /**
             * Links
             * @description Document links
             */
            links?: components["schemas"]["LinkInfo"][] | null;
            /**
             * Transformed Content
             * @description Content with transformed links
             */
            transformed_content?: string | null;
        };
        /**
         * DocumentType
         * @description Supported document types.
         * @enum {string}
         */
        "DocumentType-Input": "markdown" | "html" | "text" | "python" | "javascript" | "typescript" | "json" | "yaml" | "xml" | "other";
        /**
         * DocumentType
         * @description Document type enum.
         * @enum {string}
         */
        "DocumentType-Output": "markdown" | "quarto" | "html" | "other";
        /**
         * FileTreeItem
         * @description File tree item model.
         */
        FileTreeItem: {
            /**
             * Path
             * @description Path to the item
             */
            path: string;
            /**
             * Name
             * @description Item name
             */
            name: string;
            /**
             * Type
             * @description Item type (file or directory)
             */
            type: string;
            /**
             * Size
             * @description Item size in bytes
             */
            size?: number | null;
            /**
             * Sha
             * @description SHA hash of the item
             */
            sha?: string | null;
            /**
             * Download Url
             * @description Download URL
             */
            download_url?: string | null;
            /**
             * Html Url
             * @description HTML URL
             */
            html_url?: string | null;
            /**
             * Git Url
             * @description Git URL
             */
            git_url?: string | null;
        };
        /**
         * FunctionCall
         * @description Function call details from LLM response.
         */
        FunctionCall: {
            /**
             * Name
             * @description Function name to call
             */
            name: string;
            /**
             * Arguments
             * @description Function arguments as JSON string
             */
            arguments: string;
        };
        /**
         * GitService
         * @description Supported Git services.
         * @enum {string}
         */
        GitService: "github" | "gitlab" | "bitbucket" | "forgejo";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * LLMQueryRequest
         * @description LLM query request with structured, grouped parameters.
         *
         *     This model provides a cleaner, more maintainable structure by grouping
         *     related parameters into focused sub-models for better organization
         *     and easier maintenance.
         */
        LLMQueryRequest: {
            /** @description Core query parameters */
            query: components["schemas"]["CoreQueryRequest"];
            /** @description Tool/function calling configuration */
            tools?: components["schemas"]["ToolConfiguration"] | null;
            /** @description Document integration context */
            document?: components["schemas"]["DocumentContext"] | null;
            /** @description Processing and caching options */
            processing?: components["schemas"]["ProcessingOptions"] | null;
        };
        /**
         * LLMResponse
         * @description Response model for LLM query.
         */
        LLMResponse: {
            /**
             * Content
             * @description The content returned by the LLM
             */
            content: string;
            /**
             * Model
             * @description The model used for generation
             */
            model: string;
            /**
             * Provider
             * @description The provider of the LLM
             */
            provider: string;
            /** @description Token usage information */
            usage?: components["schemas"]["LLMUsage"];
            /**
             * Raw Response
             * @description Raw response from the provider
             */
            raw_response?: {
                [key: string]: unknown;
            };
            /**
             * Optimized Conversation History
             * @description Optimized conversation history that frontend should use for next request
             */
            optimized_conversation_history?: components["schemas"]["MessageItem"][] | null;
            /**
             * History Optimization Info
             * @description Information about how the conversation history was optimized
             */
            history_optimization_info?: {
                [key: string]: unknown;
            } | null;
            /**
             * Tool Calls
             * @description Tool calls requested by the LLM (for function calling)
             */
            tool_calls?: components["schemas"]["ToolCall"][] | null;
            /**
             * Tool Execution Results
             * @description Results of executed tool calls
             */
            tool_execution_results?: {
                [key: string]: unknown;
            }[] | null;
            /**
             * Original Tool Calls
             * @description Original tool calls from the initial LLM response (for debugging)
             */
            original_tool_calls?: components["schemas"]["ToolCall"][] | null;
        };
        /**
         * LLMUsage
         * @description Usage information for LLM requests.
         */
        LLMUsage: {
            /**
             * Prompt Tokens
             * @description Number of tokens in the prompt
             * @default 0
             */
            prompt_tokens: number;
            /**
             * Completion Tokens
             * @description Number of tokens in the completion
             * @default 0
             */
            completion_tokens: number;
            /**
             * Total Tokens
             * @description Total number of tokens used
             * @default 0
             */
            total_tokens: number;
        };
        /**
         * LinkInfo
         * @description ドキュメント内のリンク情報モデル。
         */
        LinkInfo: {
            /**
             * Text
             * @description リンクテキスト
             */
            text: string;
            /**
             * Url
             * @description リンクURL
             */
            url: string;
            /**
             * Is Image
             * @description 画像リンクかどうか
             * @default false
             */
            is_image: boolean;
            /**
             * Position
             * @description リンクの位置（開始,終了）
             */
            position: [
                number,
                number
            ];
            /**
             * Is External
             * @description 外部リンクかどうか
             * @default false
             */
            is_external: boolean;
        };
        /**
         * MCPToolInfo
         * @description Information about an MCP tool.
         */
        MCPToolInfo: {
            /**
             * Name
             * @description Tool name
             */
            name: string;
            /**
             * Description
             * @description Tool description
             */
            description?: string | null;
            /**
             * Parameters
             * @description Tool parameters
             */
            parameters?: components["schemas"]["ToolParameter"][];
            /**
             * Category
             * @description Tool category (document, feedback, analysis, etc.)
             */
            category?: string | null;
            /**
             * Enabled
             * @description Whether the tool is enabled
             * @default true
             */
            enabled: boolean;
        };
        /**
         * MCPToolsResponse
         * @description Response model for MCP tools list.
         */
        MCPToolsResponse: {
            /**
             * Tools
             * @description List of available MCP tools
             */
            tools: components["schemas"]["MCPToolInfo"][];
            /**
             * Total Count
             * @description Total number of available tools
             */
            total_count: number;
            /**
             * Categories
             * @description Available tool categories
             */
            categories: string[];
            /**
             * Server Info
             * @description MCP server information
             */
            server_info?: {
                [key: string]: unknown;
            };
        };
        /**
         * MessageItem
         * @description A single message in a conversation.
         */
        MessageItem: {
            /** @description Role of the message sender */
            role: components["schemas"]["MessageRole"];
            /**
             * Content
             * @description Content of the message
             */
            content: string;
            /**
             * Timestamp
             * @description Timestamp when the message was created
             */
            timestamp?: string | null;
        };
        /**
         * MessageRole
         * @description Role in a conversation message.
         * @enum {string}
         */
        MessageRole: "user" | "assistant" | "system";
        /**
         * ProcessingOptions
         * @description Processing and caching options for LLM requests.
         *
         *     This model groups parameters that control how the request is processed and cached.
         */
        ProcessingOptions: {
            /**
             * Disable Cache
             * @description If True, bypass cache and always make a fresh API call
             * @default false
             */
            disable_cache: boolean;
            /**
             * Options
             * @description Additional options for the LLM provider
             */
            options?: {
                [key: string]: unknown;
            };
        };
        /**
         * ProviderCapabilities
         * @description Capabilities of an LLM provider.
         */
        ProviderCapabilities: {
            /**
             * Available Models
             * @description List of available models
             */
            available_models: string[];
            /**
             * Max Tokens
             * @description Maximum tokens per model
             */
            max_tokens: {
                [key: string]: number;
            };
            /**
             * Supports Streaming
             * @description Whether the provider supports streaming
             * @default false
             */
            supports_streaming: boolean;
            /**
             * Supports Function Calling
             * @description Whether the provider supports function calling
             * @default false
             */
            supports_function_calling: boolean;
            /**
             * Supports Vision
             * @description Whether the provider supports vision/images
             * @default false
             */
            supports_vision: boolean;
        };
        /**
         * RepositoryContext
         * @description Repository context information from current document view.
         *
         *     This model represents the repository and location context
         *     of the currently displayed document.
         */
        RepositoryContext: {
            /** @description Git service type (github, gitlab, etc.) */
            service: components["schemas"]["GitService"];
            /**
             * Owner
             * @description Repository owner/organization name
             */
            owner: string;
            /**
             * Repo
             * @description Repository name
             */
            repo: string;
            /**
             * Ref
             * @description Branch/tag reference
             * @default main
             */
            ref: string;
            /**
             * Current Path
             * @description Current document path relative to repository root
             */
            current_path?: string | null;
            /**
             * Base Url
             * @description Base URL for the repository
             */
            base_url?: string | null;
        };
        /**
         * RepositoryStructureResponse
         * @description Repository structure response model.
         */
        RepositoryStructureResponse: {
            /**
             * Service
             * @description Git service
             */
            service: string;
            /**
             * Owner
             * @description Repository owner
             */
            owner: string;
            /**
             * Repo
             * @description Repository name
             */
            repo: string;
            /**
             * Ref
             * @description Branch or tag name
             * @default main
             */
            ref: string;
            /**
             * Tree
             * @description Repository tree
             */
            tree: components["schemas"]["FileTreeItem"][];
            /**
             * Last Updated
             * Format: date-time
             * @description Last updated datetime
             */
            last_updated: string;
        };
        /**
         * SearchQuery
         * @description Search query model.
         */
        SearchQuery: {
            /**
             * Query
             * @description Search query
             */
            query: string;
            /**
             * Limit
             * @description Maximum number of results
             * @default 10
             */
            limit: number;
            /**
             * Offset
             * @description Results offset
             * @default 0
             */
            offset: number;
        };
        /**
         * SearchResponse
         * @description Search response model.
         */
        SearchResponse: {
            /**
             * Total
             * @description Total number of results
             */
            total: number;
            /**
             * Offset
             * @description Results offset
             */
            offset: number;
            /**
             * Limit
             * @description Maximum number of results
             */
            limit: number;
            /**
             * Query
             * @description Search query
             */
            query: string;
            /**
             * Results
             * @description Search results
             */
            results: components["schemas"]["SearchResultItem"][];
            /**
             * Execution Time Ms
             * @description Search execution time in milliseconds
             */
            execution_time_ms: number;
        };
        /**
         * SearchResultItem
         * @description Search result item model.
         */
        SearchResultItem: {
            /**
             * Path
             * @description Path to the file
             */
            path: string;
            /**
             * Name
             * @description File name
             */
            name: string;
            /**
             * Type
             * @description File type
             */
            type: string;
            /**
             * Repository
             * @description Repository name
             */
            repository: string;
            /**
             * Owner
             * @description Repository owner
             */
            owner: string;
            /**
             * Service
             * @description Git service
             */
            service: string;
            /**
             * Score
             * @description Search score
             */
            score: number;
            /**
             * Highlight
             * @description Search highlight
             */
            highlight?: string | null;
            /**
             * Metadata
             * @description File metadata
             * @default {}
             */
            metadata: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * ToolCall
         * @description Tool call details from LLM response.
         */
        ToolCall: {
            /**
             * Id
             * @description Tool call ID
             */
            id: string;
            /**
             * Type
             * @description Tool call type
             * @default function
             * @constant
             */
            type: "function";
            /** @description Function call details */
            function: components["schemas"]["FunctionCall"];
        };
        /**
         * ToolConfiguration
         * @description Configuration for tool/function calling capabilities.
         *
         *     This model groups all parameters related to LLM tool execution and function calling.
         */
        ToolConfiguration: {
            /**
             * Enable Tools
             * @description Enable automatic function calling/tool execution
             * @default false
             */
            enable_tools: boolean;
            /**
             * Tool Choice
             * @description Tool selection strategy: auto, none, required, or specific function name
             * @default auto
             */
            tool_choice: string | null;
            /**
             * Complete Tool Flow
             * @description If True, use complete Function Calling flow (tool execution + LLM followup). If False, use legacy flow (direct tool results)
             * @default true
             */
            complete_tool_flow: boolean;
        };
        /**
         * ToolParameter
         * @description Parameter definition for an MCP tool.
         */
        ToolParameter: {
            /**
             * Name
             * @description Parameter name
             */
            name: string;
            /**
             * Type
             * @description Parameter type
             */
            type: string;
            /**
             * Description
             * @description Parameter description
             */
            description?: string | null;
            /**
             * Required
             * @description Whether the parameter is required
             * @default false
             */
            required: boolean;
            /**
             * Default
             * @description Default value if any
             */
            default?: unknown | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_api_v1_health__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    get_document_api_v1_documents_contents__service___owner___repo___path__get: {
        parameters: {
            query?: {
                /** @description Branch or tag name */
                ref?: string | null;
                /** @description Transform relative links to absolute */
                transform_links?: boolean;
                /** @description Base URL for link transformation */
                base_url?: string | null;
            };
            header?: never;
            path: {
                /** @description Git service (github, forgejo, mock) */
                service: string;
                /** @description Repository owner */
                owner: string;
                /** @description Repository name */
                repo: string;
                /** @description Document path */
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_repository_structure_api_v1_documents_structure__service___owner___repo__get: {
        parameters: {
            query?: {
                /** @description Branch or tag name */
                ref?: string | null;
                /** @description Path prefix to filter by */
                path?: string | null;
            };
            header?: never;
            path: {
                /** @description Git service (github, forgejo, mock) */
                service: string;
                /** @description Repository owner */
                owner: string;
                /** @description Repository name */
                repo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepositoryStructureResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_repository_api_v1_search__service___owner___repo__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Git service (github, gitlab, etc.) */
                service: string;
                /** @description Repository owner */
                owner: string;
                /** @description Repository name */
                repo: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchQuery"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    query_llm_api_v1_llm_query_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMQueryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_capabilities_api_v1_llm_capabilities_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderCapabilities"];
                };
            };
        };
    };
    get_provider_info_api_v1_llm_providers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_provider_status_api_v1_llm_providers__provider_name__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the provider to check */
                provider_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_templates_api_v1_llm_templates_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    format_prompt_api_v1_llm_format_prompt_post: {
        parameters: {
            query: {
                /** @description ID of the template to format */
                template_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_llm_response_api_v1_llm_stream_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMQueryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mcp_tools_api_v1_llm_tools_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPToolsResponse"];
                };
            };
        };
    };
    get_mcp_tool_api_v1_llm_tools__tool_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the tool to get information about */
                tool_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPToolInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
